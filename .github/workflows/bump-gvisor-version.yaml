name: Update gVisor Version
# Scheduled workflow to check for new gVisor releases and update the GVISOR_VERSION file accordingly.
# If a new version is found, it creates a pull request with the updated version.
# Can also be triggered manually.

on:
  workflow_dispatch:
  schedule:
    - cron: "0 06 * * 1" # Runs every Monday at 06:00 UTC

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: update-gvisor
  cancel-in-progress: true

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.GARDENER_GITHUB_ACTIONS_APP_ID }}
          private-key: ${{ secrets.github-app-secret-key || secrets.GARDENER_GITHUB_ACTIONS_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: get latest GVISOR_VERSION
        shell: bash
        id: fetch_version
        run: |
          set -euo pipefail

          # Find latest release-* tag upstream
          latest_tag="$(git ls-remote --tags --refs https://github.com/google/gvisor.git \
            | awk -F/ '/refs\/tags\/release-/{print $NF}' \
            | sort -V | tail -n1)"
          [[ -n "$latest_tag" ]] || { echo "No release-* tags found"; exit 1; }
          upstream_version="${latest_tag#release-}"

          if [[ ! -f GVISOR_VERSION ]]; then
            echo "Error: GVISOR_VERSION file not found." >&2
            exit 1
          fi
          current_version="$(tr -d '\r\n' < GVISOR_VERSION || true)"

          if [[ "$upstream_version" == "${current_version}" ]]; then
            echo "GVISOR_VERSION already $upstream_version â€” nothing to do."
            echo "needs-update=false" >> "$GITHUB_OUTPUT" 
            exit 0
          fi

          commit_msg=""
          commit_msg+="chore(gvisor): update to ${upstream_version}\n\n"
          commit_msg+="Update GVISOR_VERSION from \`${current_version}\` to \`${upstream_version}\`.\n"
          commit_msg+="Upstream tag: ${latest_tag}\n"
          if [[ -n "${current_version}" ]]; then
            commit_msg+="Diff: https://github.com/google/gvisor/compare/release-${current_version}...${latest_tag}\n"
          fi

          body=""
          body+="\nDiff: https://github.com/google/gvisor/compare/release-${current_version}...${latest_tag}\n"
          body+="\n**Release note**:\n\`\`\`improvement operator\nUpdated gVisor binaries to \`${upstream_version}\`.\n\`\`\`\n"
          branch_name="bump-gvisor-to-$upstream_version"
          echo "commit-message=${commit_msg}" >> ${GITHUB_OUTPUT}
          echo "pr-body=${body}" >> ${GITHUB_OUTPUT}
          echo "gVisor-version=$upstream_version" >> "${GITHUB_OUTPUT}"
          echo "branch-name=$branch_name" >> "${GITHUB_OUTPUT}"

          owner='${{ github.repository_owner }}'
          existing_url="$(gh pr list --state open --head "${owner}:${branch_name}" --json url --jq '.[0].url // empty')"
          if [[ -n "$existing_url" ]]; then
            echo "PR already open: $existing_url"
            echo "needs-update=false" >> "$GITHUB_OUTPUT" 
            exit 0
          fi

          # let pipeline fail because no PR exists for this branch
          if git ls-remote --exit-code origin "$branch_name" >/dev/null 2>&1; then
            echo "gVisor version Bump branch $branch_name already exists"
            exit 1
          fi

          git checkout -b "$branch_name"
          echo "Created branch: $branch_name"
          echo "needs-update=true" >> "${GITHUB_OUTPUT}"

      - uses: gardener/cc-utils/.github/actions/version@master
        id: version
        if: steps.fetch_version.outputs.needs-update == 'true'
        name: create-release-commit
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        with:
          commit-message: ${{ steps.fetch_version.outputs.commit-message }}
          versionfile: "GVISOR_VERSION"
          version-operation: "noop"
          commit-kind: "bump"
          repository-operation: commit-to-head
          version: ${{ steps.fetch_version.outputs.gvisor-version }}

      - name: Push prepare branch and create Pull Request
        shell: bash
        if: steps.fetch_version.outputs.needs-update == 'true'
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          GVISOR_VERSION: ${{ steps.fetch_version.outputs.gvisor-version }}
          PR_BODY: ${{ steps.fetch_version.outputs.pr-body }}
          BRANCH_NAME: ${{ steps.fetch_version.outputs.branch-name }}
        run: |
          set -euo pipefail
          base_branch="$(gh repo view --json defaultBranchRef --jq .defaultBranchRef.name)"
          title="chore: bump gVisor to ${GVISOR_VERSION}"

          git push origin "$BRANCH_NAME"
          gh pr create \
            --base "$base_branch" \
            --head "$BRANCH_NAME" \
            --title "$title" \
            --body "$(printf '%b' "$PR_BODY")"
